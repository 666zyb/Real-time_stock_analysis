# Generated by Django 5.1.7 on 2025-03-18 14:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NewsSource',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='来源名称')),
            ],
            options={
                'verbose_name': '新闻来源',
                'verbose_name_plural': '新闻来源列表',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False, verbose_name='股票代码')),
                ('name', models.CharField(max_length=50, verbose_name='股票名称')),
                ('industry', models.CharField(blank=True, max_length=50, verbose_name='行业')),
            ],
            options={
                'verbose_name': '股票',
                'verbose_name_plural': '股票列表',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='内容')),
                ('pub_time', models.DateTimeField(verbose_name='发布时间')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='news', to='web_interface.newssource')),
            ],
            options={
                'verbose_name': '新闻',
                'verbose_name_plural': '新闻列表',
                'ordering': ['-pub_time'],
            },
        ),
        migrations.CreateModel(
            name='StockHistoryData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='日期')),
                ('open_price', models.FloatField(verbose_name='开盘价')),
                ('close_price', models.FloatField(verbose_name='收盘价')),
                ('high_price', models.FloatField(verbose_name='最高价')),
                ('low_price', models.FloatField(verbose_name='最低价')),
                ('volume', models.BigIntegerField(verbose_name='成交量(手)')),
                ('amount', models.FloatField(verbose_name='成交额(元)')),
                ('change_percent', models.FloatField(verbose_name='涨跌幅(%)')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history_data', to='web_interface.stock')),
            ],
            options={
                'verbose_name': '历史数据',
                'verbose_name_plural': '历史数据列表',
                'ordering': ['-date'],
                'unique_together': {('stock', 'date')},
            },
        ),
        migrations.CreateModel(
            name='StockRealTimeData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(verbose_name='时间')),
                ('open_price', models.FloatField(verbose_name='今日开盘价')),
                ('last_close', models.FloatField(verbose_name='昨日收盘价')),
                ('current_price', models.FloatField(verbose_name='当前价格')),
                ('high_price', models.FloatField(verbose_name='今日最高价')),
                ('low_price', models.FloatField(verbose_name='今日最低价')),
                ('volume', models.BigIntegerField(verbose_name='成交量(手)')),
                ('amount', models.FloatField(verbose_name='成交额(元)')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='realtime_data', to='web_interface.stock')),
            ],
            options={
                'verbose_name': '实时数据',
                'verbose_name_plural': '实时数据列表',
                'ordering': ['-time'],
                'unique_together': {('stock', 'time')},
            },
        ),
    ]
